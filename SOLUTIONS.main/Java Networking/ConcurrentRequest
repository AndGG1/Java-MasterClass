
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

public class ConcurrentRequests {
    
    public static void main(String[] args) throws IOException {
        
        Map<String, Integer> orderMap =
                Map.of("apples", 500,
                        "oranges", 1000,
                        "bananas", 750,
                        "carrots", 2000,
                        "cantaloupes", 100);
        String urlParams = "product=%s&amount=%d";
        String urlBase = "http://localhost:8080/Rubik";
        
        List<URI> sites = new ArrayList<>();
        orderMap.forEach((k, v) -> sites.add(URI.create(
                urlBase + "?" + urlParams.formatted(k, v)
        )));
        
        HttpClient client = HttpClient.newHttpClient();
        if (!Files.exists(Path.of("orders"))) {
            final var path = Path.of("orders");
            Files.createFile(path);
        }
        
        //sendGets(client, sites);
        sendPosts(client, urlBase, urlParams, orderMap);
    }
    
    private static void sendGets(HttpClient client, List<URI> uris) {
        var futures = uris.stream().map(HttpRequest::newBuilder)
                .map(HttpRequest.Builder::build)
                .map(request -> client.sendAsync(request, HttpResponse.BodyHandlers.ofString()))
                .toList();
        
        var allFutureReq = CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[0]));
        allFutureReq.join();
        
        futures.forEach(f -> {
            System.out.println(f.join().body());
        });
    }
    
    private static void sendPosts(HttpClient client, String baseURI, String params, Map<String, Integer> orders) {
        var futures = orders.entrySet().stream()
                .map(e -> params.formatted(e.getKey(), e.getValue()))
                .map(formattedS -> HttpRequest.newBuilder()
                        .POST(HttpRequest.BodyPublishers.ofString(formattedS)).uri(URI.create(baseURI)))
                .map(HttpRequest.Builder::build)
                .map(request -> client.sendAsync(request, HttpResponse.BodyHandlers.ofString()))
                .toList();
        
        var allFutureReq = CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[0]));
        allFutureReq.join();
        
        futures.forEach(f -> {
            try {
                Files.writeString(Path.of("orders"), "\n" + f.join().body(), StandardOpenOption.APPEND);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
    }
}
